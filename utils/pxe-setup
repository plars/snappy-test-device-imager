#!/usr/bin/env python3
# Copyright (C) 2016 Canonical
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import binascii
import os
import socket
import sys


def get_args():
    parser = argparse.ArgumentParser(
        description='Set up pxe boot configuration files')
    parser.add_argument('ipaddr', nargs=1, help='IP address')
    parser.add_argument('--delete', '-d', action='store_true',
                        help='Delete config file so the default is used')
    parser.add_argument('--path', '-p',
                        default='/var/lib/tftpboot/pxelinux.cfg',
                        help='Path to pxe boot file configs')
    parser.add_argument('--template', '-t',
                        help='Template file to use for pxe config')
    args = parser.parse_args()
    return args


def ip_to_hex(ip):
    return binascii.hexlify(socket.inet_aton(ip)).decode().upper()


def get_template(template_file):
    template = """DEFAULT netboot
LABEL netboot
MENU LABEL netboot
LINUX /boot/vmlinuz
APPEND initrd=/boot/init.img net.ifnames=0
"""
    if template_file:
        with open(template_file) as f:
            template = f.read()
    return template


def write_template(filename, template):
    print('Writing template data to', filename)
    with open(filename, 'w') as f:
        f.write(template)


def delete_config(filename):
    print('Deleting config data at', filename)
    os.unlink(filename)


def main():
    args = get_args()
    filename = os.path.join(args.path, ip_to_hex(args.ipaddr[0]))
    if args.delete:
        delete_config(filename)
        return
    template = get_template(args.template)
    write_template(filename, template)

if __name__ == '__main__':
    sys.exit(main())
